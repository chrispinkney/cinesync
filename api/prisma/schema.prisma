generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id         String    @id @default(uuid())
  name       String
  is_private Boolean
  creator_id String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Movie      Movie[]
  User       User[]
  comments   Comment[]
}

model Movie {
  id           String   @id @default(uuid())
  title        String   @unique
  description  String
  genre        String[]
  release_date String
  poster_url   String
  rating       Float
  imdb_id      String
  List         List[]
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  email          String    @unique
  password       String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  role           Role
  avatar         Bytes?
  List           List[]
  friendsWith    Friends[] @relation("user_1")
  friendsRequest Friends[] @relation("user_2")
  comments       Comment[]
}

model Friends {
  user_1    User     @relation("user_1", fields: [userId1], references: [id], onDelete: Cascade)
  userId1   String   @map("id_1")
  user_2    User     @relation("user_2", fields: [userId2], references: [id], onDelete: Cascade)
  userId2   String   @map("id_2")
  isFriend  Boolean  @map("is_friend")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId1, userId2])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  list      List     @relation(fields: [listId], references: [id])
  listId    String   @map("list_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum Role {
  ADMIN
  USER
}
